#pragma once
#include <list>
#include <string>
#include "ObservableVariable.h"

struct DelayedCommand;

class Command
{
public:
	virtual ~Command() {}

	// DESIGN CHOICE: Pass in text output variable since almost every
	// command will need to update the BattleGameState's status message.
	// Note how this saves us space in memory -- every command will use
	// the same output variable that belongs to BattleGameState.
	// DESIGN CHOICE: Return list of commands representing the commands
	// generated by the execution of this command. This way, commands
	// don't need to worry about how commands are queued together,
	// leaving it up to the caller (keeps responsibilities better partitioned)
	virtual std::list<Command*> Execute(ObservableVariable<std::string>& textOutput) = 0;
};

// DESGIN CHOICE: Separate data structure to pair a command ptr variable
// with a time remaining variable to make it easier to 
// read code when accessing these values
struct DelayedCommand
{
	float timeRemaining;
	Command* command;

	DelayedCommand()
		:timeRemaining(0), command(nullptr)
	{}
	DelayedCommand(float delay, Command* command)
		: timeRemaining(delay), command(command)
	{}
};