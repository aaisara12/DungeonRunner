Dungeon Runner Problem Progression:

This is a story of this project up until today in the form of
a sequential list of questions representing the major challenges
I've come across in developing this project. Hopefully it provides
some insight into why I designed the project as it stands now.
The options I considered (in order) for resolving each question is labeled
with a letter A, B, C, ..., and the option I selected is followed
by a > character with justification bullets below. Questions that
arose as a result of a previous question are nested within the question.


* What are the mechanics of the game?
	A> See GDD
		- Simplicity is key to finishing something

* How do I display the game?
	A> ASCII graphics
	* How do I make the display extensible?
		A> Modular UI Objects
		* How does the game update the UI?
			A: Direct function call
			B> Event-listener pattern
				- More complex
				- Reduce pollution in other classes

	* How do I keep UI style consistent?
		A: Manually type out each UI's layout 
		B> Auto-styling based on specification variables
			- More complex
			- Easier to style/change UI in the long run

* How do I run the main game loop?
	A: Single hard-coded loop for game
	B: Process list
		- More complex
		- Easier to swap between conceptually different
		  parts of the program (such as start screen and
		  actual battle potion)
	C> Process variable
		- Simpler, no need to run multiple processes
		- Still easy to swap between diff parts of the program
	* How do you transition from one active process to another?
	A: Have a process be responsible for instantiating the next
	   process and pass it to the GameManager
	B: Use a simple state machine transition model
		- Processes don't need to know about each other
		- Processes aren't coupled with each other or the GameManager
		- Don't need to allocate/deallocate memory as frequently
		- More complex to implement and may be overkill (was)
	C> State machine with hard-coded transitions
		- Don't need complex transition logic
		- Only a few transitions needed, so not too much work

* How do I animate the UI to make the game more lively?
	A: Make base UI class inherit from process and place UI into
 	   list of processes along with active process instead of separate
	   list of UI
	B> Add virtual tick function to base UI class and just add call it
	   every frame (CURRENTLY IMPLEMENTING)
		- Keeps code clearer about what's actively doing the work (process)
		  and what's simply displaying the work (user interfaces) and
		  easier to understand/debug
	* How can we prevent input requests from interrupting UI animations?
		A: Refresh input text every frame in addition to UI?
		B> Write method to queue up an input request that will be
		   queried as soon as all animations are finished. Check
		   state of UI animation perhaps through return value of
		   getDisplay() function
			- The simpler of the options
			- Not wasteful, since calling getDisplay() anyways
		   