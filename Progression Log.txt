Dungeon Runner Problem Progression:

This is a story of this project up until today in the form of
a sequential list of questions representing the major challenges
I've come across in developing this project. Hopefully it provides
some insight into why I designed the project as it stands now.
The options I considered (in order) for resolving each question is labeled
with a letter A, B, C, ..., and the option I selected is followed
by a > character with justification bullets below. Questions that
arose as a result of a previous question are nested within the question.


* What are the mechanics of the game?
	A> See GDD
		- Simplicity is key to finishing something

* How do I display the game?
	A> ASCII graphics
	* How do I make the display extensible?
		A> Modular UI Objects
		* How does the game update the UI?
			A: Direct function call
			B> Event-listener pattern
				- More complex
				- Reduce pollution in other classes

	* How do I keep UI style consistent?
		A: Manually type out each UI's layout 
		B> Auto-styling based on specification variables
			- More complex
			- Easier to style/change UI in the long run

* How do I run the main game loop?
	A: Single hard-coded loop for game
	B: Process list
		- More complex
		- Easier to swap between conceptually different
		  parts of the program (such as start screen and
		  actual battle potion)
	C> Process variable
		- Simpler, no need to run multiple processes
		- Still easy to swap between diff parts of the program
	* How do you transition from one active process to another?
		A: Have a process be responsible for instantiating the next
	   	process and pass it to the GameManager
		B: Use a simple state machine transition model
			- Processes don't need to know about each other
			- Processes aren't coupled with each other or the GameManager
			- Don't need to allocate/deallocate memory as frequently
			- More complex to implement and may be overkill (was)
		C> State machine with hard-coded transitions
			- Don't need complex transition logic
			- Only a few transitions needed, so not too much work

* How do I implement the main battle portion? Realtime delays?
	A> Queue up actions to perform in order. Each action has a
	   specified amount of time to delay before being popped.
		- Easy to insert delays of variable length
	* How do I make the battle system dynamic so that different
	  actions happen based on the results of executing previous actions?
		A> Give actions ability to spawn new actions at front or
		   back of queue (essentially use both stack and queue)
			- Allows actions to spawn children and resolve them first
			  before continuing on (almost like a DFS) to others
		* How do I enable actions to spawn more actions in a safe way?
			A: Pass in a reference to the queue of commands
			B: Make BattleGameState listen for events triggered by commands
		   	and add corresponding commands to queue
				- Code will get complicated as we need to create several
			  	  events and have the BattleGameState instance listen
				- Level of indirection with commands triggering events
			  	  and events triggering addition of commands that makes
			  	  it difficult to wrap your head around which commands
			  	  are spawning which
			C> Have commands return list of commands it would like to add
				- Commands don't need to know about queue at all or any
			  	  external logic
				- Direct link between commands and commands they spawn

* How do I communicate information about the input state to the GameManager?
	A: 2-phase input module with events that GM listens for
		- Complicated to get input response information back from GM
		  without coupling it to GM
	B: Store input state in input module and use it to automatically
	   divide input reading across two frames instead of one to enable
	   the GameManager to register it in the first and make the
	   corresponding adjustments in the second.
		- Implicitly couples game state to GameManager implementation
	C> Direct GM method call
		- Much simpler to get intended behavior
		- Can keep a single instance input user interface in GM
		- GameManager becomes a dependency for game states that want input

* How do I animate the UI to make the game more lively?
	A: Make base UI class inherit from process and place UI into
 	   list of processes along with active process instead of separate
	   list of UI
	B> Add virtual tick function to base UI class and just add call it
	   every frame (CURRENTLY IMPLEMENTING)
		- Keeps code clearer about what's actively doing the work (process)
		  and what's simply displaying the work (user interfaces) and
		  easier to understand/debug
	* How can we prevent input requests from interrupting UI animations?
		A: Refresh input text every frame in addition to UI?
		B> Write method to queue up an input request that will be
		   queried as soon as all animations are finished. Check
		   state of UI animation perhaps through return value of
		   getDisplay() function
			- The simpler of the options
			- Not wasteful, since calling getDisplay() anyways
		   